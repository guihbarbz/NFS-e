import tkinter as tk
from tkinter import simpledialog
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import StaleElementReferenceException, TimeoutException
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
import pyautogui
import time
import os

# --- Fun√ß√£o Principal (Orquestrador) ---
def main():
    """Fun√ß√£o principal que orquestra toda a automa√ß√£o."""
    
    # --- DADOS FIXOS ---
    cnpj_fixo = "24255199000167"
    senha_fixa = "colibri"
    constantes = {
        "codigo_servico": "8.02/859960100",
        "descricao": "Servi√ßos prestados",
        "aliquota": "2"
    }

    dados_variaveis = coletar_dados_gui()
    
    driver = None
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        driver.maximize_window()
        wait = WebDriverWait(driver, 15)
        driver.get("https://guarulhos.ginfes.com.br/")

        # Chamada das fun√ß√µes de l√≥gica
        realizar_login(driver, wait, cnpj_fixo, senha_fixa)
        preencher_dados_tomador(wait, dados_variaveis)
        preencher_dados_servico(driver, wait, dados_variaveis, constantes)
        emitir_nfs(driver, wait)

        print("\nüéâ Processo finalizado com sucesso! A nota foi emitida.")

        # --- Salvar PDF da Nota ---
        salvar_pdf(driver, wait, dados_variaveis)

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro: {e}")
    finally:
        if driver:
            input("üîé Verifique o resultado. Pressione ENTER para fechar o navegador...")
            driver.quit()

# --- Fun√ß√µes de L√≥gica da Automa√ß√£o ---
def coletar_dados_gui():
    """Cria uma interface gr√°fica para coletar os dados do cliente e servi√ßo."""
    root = tk.Tk()
    root.withdraw()
    dados = {}
    dados['cpf'] = simpledialog.askstring("Dados do Tomador", "Digite o CPF:")
    dados['nome'] = simpledialog.askstring("Dados do Tomador", "Digite o Nome:")
    dados['cep'] = simpledialog.askstring("Dados do Tomador", "Digite o CEP:")
    dados['numero'] = simpledialog.askstring("Dados do Tomador", "Digite o N√∫mero:")
    dados['telefone'] = simpledialog.askstring("Dados do Tomador", "Digite o Telefone:")
    dados['dia'] = simpledialog.askstring("Dados do Servi√ßo", "Digite o Dia (ex: 28):")
    dados['valor_servico'] = simpledialog.askstring("Dados do Servi√ßo", "Digite o Valor do Servi√ßo:")
    return dados

def realizar_login(driver, wait, cnpj, senha):
    print("Iniciando login...")
    time.sleep(2)
    ActionChains(driver).send_keys(Keys.ENTER).perform()
    clicar_com_retry(wait, By.CLASS_NAME, "imagem1")
    
    campo_cnpj = wait.until(EC.visibility_of_element_located((By.XPATH, "//label[text()='CNPJ:']/following::input[1]")))
    campo_cnpj.send_keys(cnpj)

    campo_senha = wait.until(EC.visibility_of_element_located((By.XPATH, "//label[text()='Senha:']/following::input[1]")))
    campo_senha.send_keys(senha)

    clicar_com_retry(wait, By.XPATH, "//button[contains(text(),'Entrar')]")
    print("‚úÖ Login realizado com sucesso.")

def preencher_dados_tomador(wait, dados):
    print("Preenchendo dados do tomador...")
    clicar_com_retry(wait, By.XPATH, "//img[@class='gwt-Image' and contains(@src,'icon_nfse3.gif')]")

    preencher_por_label(wait, "CPF:", dados['cpf'])
    preencher_por_label(wait, "Nome:", dados['nome'])
    preencher_por_label(wait, "CEP:", dados['cep'])
    clicar_com_retry(wait, By.XPATH, "//img[@title='Busca endere√ßo pelo cep']")
    
    preencher_por_label(wait, "N√∫mero:", dados['numero'])
    preencher_por_label(wait, "Telefone:", dados['telefone'])
    
    clicar_com_retry(wait, By.XPATH, "//button[contains(text(),'Pr√≥ximo Passo')]")
    print("‚úÖ Dados do tomador preenchidos.")

def preencher_dados_servico(driver, wait, dados, constantes):
    print("Preenchendo dados do servi√ßo...")

   # ---------------- Sele√ß√£o de Dia ----------------
    clicar_com_retry(wait, By.XPATH, "//label[text()='Dia:']/following::input[1]")  # abre o combo
    item_dia = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, f"//div[contains(@class,'x-combo-list-item') and text()='{dados['dia']}']"))
    )
    item_dia.click()
    time.sleep(0.3)


    # C√≥digo de Servi√ßo
    input_codigo = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//input[contains(@class,'x-combo-noedit') and contains(@class,'cbTextAlign')]")
    ))
    trigger = input_codigo.find_element(By.XPATH, "./following-sibling::img | ./following-sibling::div[contains(@class,'x-form-trigger')]")
    trigger.click()
    time.sleep(0.3)

    ActionChains(driver).send_keys(Keys.ENTER).perform()

    # Preenche os demais campos
    active_element = driver.switch_to.active_element
    active_element.send_keys(Keys.TAB)

    active_element = driver.switch_to.active_element
    active_element.send_keys(constantes['aliquota'])
    active_element.send_keys(Keys.TAB)

    active_element = driver.switch_to.active_element
    active_element.send_keys(constantes['descricao'])

    for _ in range(4):
        active_element = driver.switch_to.active_element
        active_element.send_keys(Keys.TAB)

    active_element = driver.switch_to.active_element
    active_element.send_keys(dados['valor_servico'])

    print("‚úÖ Dados do servi√ßo preenchidos com sucesso.")

def emitir_nfs(driver, wait):
    print("Iniciando emiss√£o da nota...")
    clicar_com_retry(wait, By.XPATH, "//button[contains(text(),'Pr√≥ximo Passo >> ')]")
    clicar_com_retry(wait, By.XPATH, "//button[contains(text(),'Emitir')]")
    print("üîπ Bot√£o 'Emitir' clicado.")

    time.sleep(2)
    ActionChains(driver).send_keys(Keys.ENTER).perform()
    time.sleep(1)
    ActionChains(driver).send_keys(Keys.ENTER).perform()
    
    print("üîπ Tecla ENTER pressionada 2x para confirma√ß√£o.")



def salvar_pdf(driver, wait, dados):
    print("Iniciando exporta√ß√£o do PDF...")

    # --- Caminho para salvar o PDF ---
    caminho_pasta = r"C:\Users\Colibri\Desktop\Notas\Notas Set"
    os.makedirs(caminho_pasta, exist_ok=True)

    # Gera o nome final do arquivo
    nome_arquivo = f"{dados['nome']} - {dados['cpf']}.pdf"
    for char in ['/', '\\', ':', '*', '?', '"', '<', '>', '|']:
        nome_arquivo = nome_arquivo.replace(char, '-')
    caminho_pdf = os.path.join(caminho_pasta, nome_arquivo)

    try:
        # Garante que estamos na √∫ltima aba
        driver.switch_to.window(driver.window_handles[-1])
        print(f"üîé URL atual: {driver.current_url}")

        # Localiza e clica no bot√£o "Exportar PDF"
        botao_pdf = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//a[@class='titulo' and contains(text(),'Exportar PDF')]")
        ))
        botao_pdf.click()
        print("‚úÖ Bot√£o 'Exportar PDF' clicado.")

        # Espera abrir a nova aba com o PDF
        time.sleep(3)
        driver.switch_to.window(driver.window_handles[-1])
        print("üîπ PDF carregado na nova aba.")

        # --- Salvar PDF usando pyautogui ---
        time.sleep(2)  # espera o PDF renderizar
        pyautogui.hotkey('ctrl', 's')  # abre a janela "Salvar como"
        time.sleep(1)
        pyautogui.typewrite(caminho_pdf)
        pyautogui.press('enter')
        time.sleep(3)
        print(f"‚úÖ PDF salvo em: {caminho_pdf}")

    except Exception as e:
        print(f"‚ùå Erro ao exportar PDF: {e}")



# --- Fun√ß√µes auxiliares ---
def clicar_com_retry(wait, by, identificador, tentativas=5):
    for _ in range(tentativas):
        try:
            elemento = wait.until(EC.element_to_be_clickable((by, identificador)))
            elemento.click()
            return
        except (StaleElementReferenceException, TimeoutException):
            time.sleep(1)
    raise Exception(f"N√£o foi poss√≠vel clicar no elemento {identificador} ap√≥s {tentativas} tentativas.")

def preencher_por_label(wait, label_text, valor, tentativas=5):
    for _ in range(tentativas):
        try:
            label = wait.until(EC.presence_of_element_located((By.XPATH, f"//label[text()='{label_text}']")))
            input_id = label.get_attribute("for")
            input_element = wait.until(EC.visibility_of_element_located((By.ID, input_id)))
            input_element.clear()
            input_element.send_keys(valor)
            return
        except (StaleElementReferenceException, TimeoutException):
            time.sleep(1)
    raise Exception(f"N√£o foi poss√≠vel preencher o campo com label '{label_text}' ap√≥s {tentativas} tentativas.")

# --- Ponto de Entrada ---
if __name__ == "__main__":
    main()
